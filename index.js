const { parse } = require("dotenv");
const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();
const allVariables = require("./variables");
const bot = new Telegraf(process.env.BOT_TOKEN);

const chat_id = -765565757;

const user = {};

bot.start(async (ctx) => {
  await ctx.reply(
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${ctx.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.`,
    Markup.keyboard([
      Markup.button.text("–ú–µ–Ω—é üìí"),
      Markup.button.text("–ö–æ—Ä–∑–∏–Ω–∞ üõí"),
    ]).resize()
  );
});

bot.hears("–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚¨ÖÔ∏è", async (ctx) => {
  await ctx.reply(
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${ctx.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.`,
    Markup.keyboard([
      Markup.button.text("–ú–µ–Ω—é üìí"),
      Markup.button.text("–ö–æ—Ä–∑–∏–Ω–∞ üõí"),
    ]).resize()
  );
});

bot.command("menu", async (ctx) => {
  await ctx.reply(
    `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.`,
    Markup.keyboard([
      [Markup.button.text("–ü–∏—Ü—Ü–∞ üçï")],
      [Markup.button.text("–ë—É—Ä–≥–µ—Ä—ã üçî"), Markup.button.text("–ü–∞—Å—Ç–∞ üçù")],
      [Markup.button.text("–ì–∞—Ä–Ω–∏—Ä—ã üçü"), Markup.button.text("–°–∞–ª–∞—Ç—ã ü•ó")],
      [Markup.button.text("–ù–∞–ø–∏—Ç–∫–∏ ü•§"), Markup.button.text("–î–µ—Å—Å–µ—Ä—Ç—ã üç∞")],
      [Markup.button.text("–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚¨ÖÔ∏è")],
    ])
      .resize()
      .oneTime()
  );
});
bot.hears("–ú–µ–Ω—é üìí", async (ctx) => {
  await ctx.reply(
    `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.`,
    Markup.keyboard([
      [Markup.button.text("–ü–∏—Ü—Ü–∞ üçï")],
      [Markup.button.text("–ë—É—Ä–≥–µ—Ä—ã üçî"), Markup.button.text("–ü–∞—Å—Ç–∞ üçù")],
      [Markup.button.text("–ì–∞—Ä–Ω–∏—Ä—ã üçü"), Markup.button.text("–°–∞–ª–∞—Ç—ã ü•ó")],
      [Markup.button.text("–ù–∞–ø–∏—Ç–∫–∏ ü•§"), Markup.button.text("–î–µ—Å—Å–µ—Ä—Ç—ã üç∞")],
      [Markup.button.text("–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚¨ÖÔ∏è")],
    ])
      .resize()
      .oneTime()
  );
});

function makePublication(
  ctx,
  img_url,
  parse_publication,
  parse_text,
  caption_txt,
  btn_txt,
  btn_data
) {
  ctx.replyWithPhoto(
    {
      url: img_url,
    },
    {
      parse_mode: parse_publication,
      parse_mode: parse_text,
      caption: caption_txt,
      ...Markup.inlineKeyboard([Markup.button.callback(btn_txt, btn_data)]),
    }
  );
}

bot.hears("–ü–∏—Ü—Ü–∞ üçï", async (ctx) => {
  makePublication(
    ctx,
    "https://bellapizza.tj/wp-content/uploads/2020/12/shaurmapizza-300x300.jpg",
    "Markdown",
    "HTML",
    `<b>–®–∞—É—Ä–º–∞ –ø–∏—Ü—Ü–∞</b>\n–ë–µ–ª–ª–∞ –°–æ—É—Å, –ú–æ—Ü–∞—Ä–µ–ª–ª–∞, –ü–µ–ø–ø–µ—Ä–æ–Ω–∏, –ü–µ–ø–µ—Ä–æ–Ω—á–∏–Ω–∏\n\n–°—Ä–µ–¥–Ω—è—è 72—Å–æ–º\n–ë–æ–ª—å—à–∞—è 85—Å–æ–º\n–°—É–ø–µ—Ä —Å–µ–º–µ–π–Ω–∞—è 116—Å–æ–º`,
    "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí",
    "–®–∞—É—Ä–º–∞ –ø–∏—Ü—Ü–∞"
  );
});
bot.on("callback_query", async (ctx) => {
  user["Id"] = ctx.chat.id;
  user["Name"] = ctx.from.first_name || ctx.from.last_name;
  user["Order"] = ctx.update.callback_query.data;
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä",
    Markup.keyboard([
      [Markup.button.text("–°—Ä–µ–¥–Ω–∏–π"), Markup.button.text("–ë–æ–ª—å—à–æ–π")],
      [Markup.button.text("–°—É–ø–µ—Ä —Å–µ–º–µ–π–Ω—ã–π")],
    ])
      .oneTime()
      .resize()
  );
  bot.hears(["–°—Ä–µ–¥–Ω–∏–π", "–ë–æ–ª—å—à–æ–π", "–°—É–ø–µ—Ä —Å–µ–º–µ–π–Ω—ã–π"], async (ctx) => {
    user["Size"] = ctx.message.text;
    await ctx.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
    bot.on("message", async (ctx) => {
      if (ctx.message.text ** 1) {
        user["Count"] = ctx.message.text;
        return ctx.replyWithMarkdown(
          `
        –ù–∞ –∏–º—è: *${user.Name}*\n–ó–∞–∫–∞–∑: *${user.Order}*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *${user.Count}*\n–†–∞–∑–º–µ—Ä: *${user.Size}*\n\n–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ
        `,
          Markup.inlineKeyboard([
            [Markup.button.callback("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ—Ä–∑–∏–Ω–µ üõí", "–ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã")],
          ])
        );
      } else {
        return ctx.reply(
          "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        );
      }
    });
  });
});
// bot.action(/.+/, (ctx) => {
//   return (
//     ctx.answerCbQuery(`Oh, ${ctx.match[0]}! Great choice`),
//     ctx.answerInlineQuery(`Oh, ${ctx.match[0]}! Great choice`)
//   );
// });

bot.launch();

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
